@charset "UTF-8";
/*      ==================== variables ===================*/
header {
  color: #0094ff; }

/* ================== Nested Rules =====================*/
#dvMain h1 {
  color: #0094ff; }

#dvMain td {
  color: #00ff90; }

#dvMain font {
  font-family: sans-serif;
  font-size: 14px;
  color: black;
  font-weight: bold; }

/* =================== Scope ==================*/
#dvMain p {
  color: #d880e5; }

#dvMain pre {
  color: #0094ff; }

#dvMain span {
  color: #2d06f5; }

/*================== Referencing Parent Selectors: & #parent-selector ============*/
#dvMain a {
  color: blue;
  font-size: 25px;
  font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande", "Lucida Sans Unicode", Geneva, "Verdana", sans-serif; }
  #dvMain a:hover {
    color: blue;
    font-weight: bold; }

/* =============== Wrapping of data to selector ===================*/
#dvMain {
  background-color: #eeeeee;
  padding: 3%; }

/*  ========================== Mapping function to get particular value ===============   */
#dvMain {
  color: #f44336; }

/* =========================== Conditional Execution ======================================= */
#dvMain {
  color: darkolivegreen; }

/*  ********* while loop ************** */
#dvMain h1 {
  color: dodgerblue; }

#dvMain h2 {
  color: dodgerblue; }

#dvMain h3 {
  color: dodgerblue; }

#dvMain h4 {
  color: dodgerblue; }

/*   ********* For Loop *******************/
#dvMain li:nth-child(6n+1) {
  background: #ff6666;
  font-size: 30px;
  list-style: none; }

#dvMain li:nth-child(6n+2) {
  background: #ffc966;
  font-size: 20px;
  list-style: none; }

#dvMain li:nth-child(6n+3) {
  background: #ffff66;
  font-size: 30px;
  list-style: none; }

#dvMain li:nth-child(6n+4) {
  background: #00e600;
  font-size: 40px;
  list-style: none; }

#dvMain li:nth-child(6n+5) {
  background: #6666ff;
  font-size: 50px;
  list-style: none; }

#dvMain li:nth-child(6n+6) {
  background: #e600e6;
  font-size: 60px;
  list-style: none; }

#dvMain h5 {
  font-size: 50px; }

#dvMain h4 {
  font-size: 40px; }

#dvMain h3 {
  font-size: 30px; }

#dvMain h2 {
  font-size: 20px; }

#dvMain h1 {
  font-size: 10px; }

.default {
  font-weight: normal; }

.emphasis {
  font-weight: bold; }

/*   =================================== mixins =================================== */
pre {
  font-size: 14px; }

/*Arguments in Sass Mixins
A mixin can take Sass data values as arguments. These values are specified when you define the mixin and given a specific value when you @include the mixin. 
    The arguments are then passed to the mixin as variables. Arguments are included in a comma separated list enclosed in parentheses after the mixin name:*/
#mixins h1 {
  color: green;
  font-size: 20px; }

/*Default Values in Sass Mixins
When creating your mixin you can specify default values as arguments. When you include a default value, you can omit passing that value when calling your mixin because Sass will use the default value. 
    For example, if you update the headline mixin from above with a default value like in the code below:*/
#mixins h1 {
  color: red;
  font-size: 12px; }

#mixins h1 {
  color: blue;
  font-size: 12px; }

/*Keyword Arguments in Sass Mixins
You also have the option of including your mixin with keyword arguments. Even if using keyword arguments can make your code less concise, it will improve readability, which is important if someone else will be maintaining the code you have written.
     You can include keyword arguments in any order, and of course default values can be omitted:*/
h1 {
  color: blue;
  font-size: 12px; }

/*Variable Arguments in Sass Mixins
Sometimes you may need your mixin to accept a number of arguments. For example, the padding property can have from one to four arguments. In this situation, you could create a mixin that uses variable arguments. 
    Variable arguments allow you to package up arguments as a list. The variable arguments look like regular arguments for a mixin except they add (…) at the end:*/
#dvMain li:nth-child(2n+1) {
  padding: 20px; }

#dvMain li:nth-child(2n+2) {
  padding: 10px 20px; }

#dvMain li:nth-child(2n+3) {
  padding: 10px 20px 40px; }

#dvMain li:nth-child(2n+4) {
  padding: 10px 20px 30px 20px; }

/*@content
Through the @content directive you are also able to pass a block of styles not defined in the mixin. These additional styles will appear within the mixin where you place @content:*/
#mixins {
  background-color: blue;
  color: white;
  font-size: 12px;
  font-style: italic; }

/*  How To Write Your Own Custom Sass Functions  */
/*@function function-name($args) {  
 @return value-to-be-returned;  
}*/
#mixins {
  width: 37.5%; }

pre {
  color: red; }

